Questions for Alon:
(PART A)
	Q1: How should we represent the exact match string(s)?
		For example: In content we may have: |00 00 72 ...|, should we keep an array of each char ([' ', ',',...]),
			including special chars like '00'? Or should we keep them in an array of int ([00, 72, ...]).
	A:	Our decision.
	Solution: Implemented as what we call 'hexString', as string of hex chunks of bytes from the exact match.
			  For example: 
	
	Q2: Given a pcre pattern splitted into string(s) of exact match, should we set a threshold for minimum chars?
		For example: in the pcre pattern: r'/^GateCrasher\s+v\d+\x2E\d+\x2C\s+Server\s+On-Line\x2E\x2E\x2E/ims',
			the exact matches would be: ['GateCrasher', 'v', '.', ',', 'Server', 'On-Line...']. Should single
			char string(s) count? Wouldn't it be too spamy (even if we check 50%+ strings exact matched?).
	A:	Single chars are irrelevant, our decision on how many chars are relevant.
	Solution: Added all rules that were deleted to the log file (<5% of the rules), the raw data for the graphs is before thresholding.
	
	Q3a: Given special options in the pcre (i.e., '/ims' for case-insensitivity and more), should we take that into
		consideration when creating the exact match automaton?
		For example: in the pcre patten: r'/GateCrasher/ims' could be any of:
			* gAtEcRashEr, gatecrasHer, GATECRASHeR,...
		We could take that into consideration when implementing the automaton, where for every character,
		if the case-insensitivity was mentioned, can we just normelize the strings to lower-case on the exact-match and in the hash-table find function afterwords?  
	A:	All case-insensitive.
	
	Q3b: Regarding to Q3a, given special pcre patterns : o{2} to match exactly 2 times o: 'oo',
		or given o{2,3} to match between 2-3 times 'oo' or 'ooo', or given o{2,} to match *at least* 2 times o.
		Should we only consider the first example (exact match 'oo') or also the others (using the minimal number as exact match).
		For example: o{2} will be exact match 'oo', similarly o{2,} and o{2,500}.
	A:	Go for the simplest solution.
	
	Q4: ASCII vs UTF-8, if we store it as an array of int, what should we use?
		In pcre, \x__ represents UTF-8 symbols, in content |00 00 __ ...| represents UTF-8 as well?
	A:	Treat every string as a sequence of bytes (after case-insensitivity!).
	
	Q5: Are space char(s) exact match? All chars of '\r\n' '\t' and so on...
		When shown alone or when a part of a bigger string(s).
	A:	Yes.
		TODO: Substitute '\r\n' and '\t' (and so on...) with relevant char / UTF-8 / ASCII.
		
	Q6: Similarly to question Q3b, for regex patterns that could be infered in more than one way:
			r'(Login|User)' which can be 'Login' or 'User'
			r'javax?' which can be 'java' or 'javax'
		should we only take "hard" exact match (for the first example none, for the second one 'java')
		or should we also take strings that may or may not appear in a match ('Login', 'User', 'javax').
		And what does it say about "minor" optionals (e.g., '\x00?' which captures NULL escape char or not).
	A:	Go for the simplest solution.
	
	Q7: Given that a specific pcre has no exact-matches? should we leave the rule untouched or ignore it?
		For example, the pcre: r'/^.{27}/R' has no exact matches, should we ignore it or leave it as is?
	A: 	Ignore it for now but as said earlier, keep in the log-file.
		BTW, now we know that /R rules are regarding the previous rule in the list (as a sort of an addition).
			That is also the source of double/triple occurance of a rule.
		
	Q8: Considering the /R flag in pcre, we looked it up and found that it indicates that the content match should occur immediately
		after the previous content match in the rule. It enforces that the two content matches are adjacent to each other in the payload.
		Should we take that into consideration when creating the exact-matches list or just ignore it?
	A:	Ignore that.
	
===============================================================================================================================================
(PART B)	
	Q1: What exactly should we store in the hash table? Can we store our selfmade 'Substring' class that also includes the type & line number of the relevant rule?
		Or should we keep it as small as possible and keep just the substring bytes chunks (memory saving, but then we can't say which rule was detected).
	A:
	
	Q2: What do we do with strings.len() < L? Should we pad with 0's (*but then how should we match it with the incoming input stream that isn't buffed? should we keep a pointer to where we started buffing?)
		Should we just ignore all substrings.len() < L? but then we miss a lot of rules.
	A:
	
	Q3: Which sizes of hashtable should we pre-define? we thought N * exact_matches, where N = {1, 2, 4, 8, 16}
	A:
	
